import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt

# Fetch historical data for Apple Inc. (AAPL)
def get_stock_data(ticker, start_date, end_date):
    stock_data = yf.download(ticker, start=start_date, end=end_date)
    return stock_data

ticker = 'AAPL'
start_date = '2022-01-01'
end_date = '2023-01-01'
data = get_stock_data(ticker, start_date, end_date)
print(data.head())
from sklearn.preprocessing import StandardScaler

# Handle missing values (if any)
data = data.dropna()

# Feature Engineering
data['Return'] = data['Close'].pct_change()
data['SMA_20'] = data['Close'].rolling(window=20).mean()
data['SMA_50'] = data['Close'].rolling(window=50).mean()

# Drop rows with NaN values generated by rolling window operations
data = data.dropna()

# Features and Target
X = data[['Return', 'SMA_20', 'SMA_50']]
y = data['Close'].shift(-1)  # Predict next day's close price
X = X[:-1]  # Align X with y
y = y[:-1]

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
from sklearn.model_selection import train_test_split

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

# Initialize and train the model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')


# Predicting for the entire dataset to plot predictions
y_full_pred = model.predict(X_scaled)

# Plotting
plt.figure(figsize=(14, 7))
plt.plot(data.index[1:], y, label='Actual Prices')
plt.plot(data.index[1:], y_full_pred, label='Predicted Prices', linestyle='--')
plt.xlabel('Date')
plt.ylabel('Price')
plt.title('Stock Price Prediction')
plt.legend()
plt.show()
